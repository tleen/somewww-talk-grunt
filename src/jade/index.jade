doctype html
//- basically a copy of the reveal.js html template, reveal content is deleivered from an external source just to simplify the build process of this project
html(lang='en')
  head
    meta(charset='utf-8')
    title The Grunt Task Runner
    meta(name='description', content='A talk I gave to the SoME www user group in May, 2014')
    meta(name='author', content='Thomas Leen')

    meta(name='apple-mobile-web-app-capable', content='yes')
    meta(name='apple-mobile-web-app-status-bar-style', content='black-translucent')
    meta(name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')

    link(rel='stylesheet' href='//cdnjs.cloudflare.com/ajax/libs/reveal.js/2.6.2/css/reveal.min.css')
    link(rel='stylesheet' href='//cdnjs.cloudflare.com/ajax/libs/reveal.js/2.6.2/css/theme/default.css', id='theme')
    link(rel='stylesheet' href='//cdnjs.cloudflare.com/ajax/libs/reveal.js/2.6.2/lib/css/zenburn.css')
    link(rel='stylesheet' href='index.css')

    <!--[if lt IE 9]>
    | <script src="//cdnjs.cloudflare.com/ajax/libs/reveal.js/2.6.2/lib/js/html5shiv.js"></script>
    <![endif]-->
    script(src='//cdnjs.cloudflare.com/ajax/libs/reveal.js/2.6.2/lib/js/head.min.js')
    script(src='//cdnjs.cloudflare.com/ajax/libs/reveal.js/2.6.2/js/reveal.min.js')
    script(src='//cdnjs.cloudflare.com/ajax/libs/reveal.js/2.6.2/plugin/highlight/highlight.js')
    script(src='index.js', defer, async)


  body    
    header
      h1 Intro to Grunt
      
    .reveal
      .slides

        section
          img(src='images/grunt-logo.png', alt='The grunt logo')
          h2 Grunt
          p An introduction to the Grunt task runner.
          p.credits
            | by Tom Leen (tl@thomasleen.com)

        section
          h2 Grunt is...
          ul 
            li A "task runner"
            li Universally seen as a build tool
            li Built in Javascript/Node
            li Similar tools: Make, Custom scripts (bash...), Rake, Ant, Maven, Phing, Laravel, Gulp...

        section
          h2 Why use Grunt?
          ul
            li Its Javascript 
            li Lots of pre-made tasks
            li Modern orientation in tasks

        section
          section
            h2 Minimal Node
            p 
              | Grunt and its tasks use the 
              strong: a(href='http://www.nodejs.org') Node environment 
              | to execute. The end result does not have to be a Node project but the build environment needs to be  
              i setup  
              | like one.
              
          section
            h2 Project setup
            h3 NPM
            p 
              a(href='http://www.npmjs.org') The Node Package Manager  
              | This will be your means for getting grunt and your needed tasks, NPM gets its information via your...
            h3 package.json
            p 
              | You will need a  
              a(href='https://www.npmjs.org/doc/json.html') package.json  
              | file to manage your environment. This lives in the root of your project and is a json object of configuration properties.
          section
            h2 This project's package.json
            p The vital part here are the dependencies/devDependencies, this is where grunt and the tasks you need are imported:
            pre
              code(class='language-javascript')
                include ../../package.json
          section
            h2 NPM install
            p Executing the 'npm install' command will cause npm to install all the local dependencies (tasks and support libraries). Then grunt will almost work...
          section
            h2 grunt-cli
            p 
              | You also need one global command (if you are running on the command line): 'grunt-cli'. The  
              a(href='https://github.com/gruntjs/grunt-cli') command line runner  
              | for Grunt.
            pre
              code(class='language-bash')
                | npm install -g grunt-cli
            ul 
              li The 'g' flag installs this globally
              li Will run the project local version of grunt
              li Solves dependency problems with other projects using different grunt versions

        section
          section
            h2 Gruntfile.js
            p 
              | Grunt looks for its configuration in another file in the root of your project, your  
              a(href='http://gruntjs.com/sample-gruntfile') Gruntfile.js
              |. This file is actually a Node module, that does not have to mean much, except most of your configuration is defined in a  
              strong Javascript function  
              | which is passed a grunt object, which is what you actually configure.
          section
            h2 Task setup
            p While NPM gets the tasks, the gruntfile tells Grunt what to do with them.
          section
            h2 It's Javascript
            p The gruntfile is a Javascript file, which means that your Grunt configuration can be programmatically altered. Handy!
          section
            h2 This project's Grunt.js
            pre
              code(class='language-javascript')
                include ../../Gruntfile.js
          section
            h2 Three major sections
            h3 grunt.initConfig
            p Where we configure each task.
            h3 grunt.loadNpmTasks
            p Where we load each task.
            h3 grunt.registerTasks  
            p Where we setup our task list(s) and ordering

        section
          section
            h2 Tasks
            p 
              | All the things you have Grunt do are called  
              strong tasks
              |, enabled through  
              strong plugins
              |, which are node  
              strong modules
              |.
            p All you have to know is that using the package.json file you can install the tasks you need Grunt to use.
          section
            h2 What do tasks do?
            p 
              | Mostly everything. There are ~2800  
              a(href='http://gruntjs.com/plugins') available  
              | at last count.
            p Building this presentations we used: S3 upload, directory/file creation/deletion, file concatenation, file copying, CSS|JS|HTML minification, JS|CSS(|HTML) validation, environment manipulation, favicon generation, image optimization, HTML templating, SASS to CSS generation, and automated testing.
            p Just for a static website!
          section
            h2 Configuration
            p 
              | These tasks were  
              strong already available  
              | we just had to download and configure them.
          section
            h2 Tasks in package.json
            pre
              code(class='language-javascript')
                include include/imports-from-package.json
          section
            h2 Getting tasks
            pre
              code(class='language-bash')
                | npm install
            p NPM will take care of finding and installing all the tasks listed in your package.json file (and the proper versions too!)
              
          section
            h2 Loading tasks
            p You load the tasks in your Gruntfile:
            pre
              code(class='language-javascript')
                include include/gruntfile-load-tasks.js
            p Now they are available for use...

          section
            h2 Registering tasks
            p You can setup lists of tasks to run, sometimes you only want to run a few, other time more.
            pre
              code(class='language-javascript')
                include include/gruntfile-register-tasks.js
            p You need to call "registerTask" with an array of task names in order of execution.

          section
            h2 Task Names
            p 
              | Tasks come with a default name, look in each tasks doc, its usually the last part of the task plugin's name. For example 'grunt-contrib-
              strong copy  
              | is referenced as 'copy'. This is not always the case, see each plugin's docs. This is the name you use in the task list.

          section
            h2 Array of task names
            p Because the task list is an array, and the Gruntfile is Javascript you can also programatically maniplate it:
            pre
              code(class='language-javascript')
                include include/gruntfile-update-tasks.js
            p Rather than list my tasks twice, I just add my 'publish' tasks to the end of the list.
          section
            h2 Default tasks
            p When you register a task list with the name 'default' that task list will execute if you call grunt without specifying a list:
            pre
              code(class='language-bash')
                | grunt
          section
            h2 More task lists
            p You can run other lists of tasks by using a name that is not 'default', and calling grunt with that name as the argument. In this project there are two defined task lists:
            h3 default
            p Build project to a local destination
              pre
                code(class='language-bash')
                  | grunt
            h3 publish
            p Build project to a local destination and upload to s3
              pre
                code(class='language-bash')
                  | grunt publish
          section
            h2 Task targets
            p Some tasks are called by name alone, others are called by name, with a following ':' and a further description.
            pre
              code(class='language-javascript')
                include include/gruntfile-register-tasks-sub.js
            p These are different configurations of the same task. This lets you use a task differently in the same list.
        section
          section
            h2 Configuration
            p Most of the work in setting up Grunt will be in your task configuration. This takes place in the grunt.initConfig function:
            pre
              code(class='language-javascript')
                include include/gruntfile-init-config.js
          section
            h2 Main concepts
            p Grunt tasks are configured around three main concepts:
            h3 Targets
            p A specific named configuration
            h3 Files
            p What files to operate on (and where to write results)
            h3 Options
            p Task dependent options for how it should run

          section
            h2 Simple config example
            pre
              code(class='language-javascript')
                include include/single-task-config.js
            p A very simple task configuration for the "uglify" task. Take in the "tmp/index.js" file as input, uglify and output as the same file.
          section
            h2 Targets
            p You can name the specific configurations, so that you may call that configuration. Remember the ':'? You don't have to name it if you just want to run that one configuration simply.
            pre
              code(class='language-javascript')
                include include/gruntfile-task-targets.js
            pre
              code(class='language-bash')
                | grunt concat # run the js and css (all) tasks
                | grunt concat:js # just run the one named task configuration
          section
            h2 Target names
            p The names are descriptive, but dont have to be anything specific.
            p 
              | except "
              strong options 
              |" that is reserved for setting up the options for each task... 
          section
            h2 Options
            p You can pass these in under the property name "options":
            pre
              code(class='language-javascript')
                include include/options.js
            p If options are at the same level as the targets these options apply to all task targets, you can override locally in the target configuration. 

        section
          section
            h2 File configurations
            p 
              | Because file input and output is so often used in Grunt tasks, Grunt has a  
              a(href='http://gruntjs.com/configuring-tasks') sophisticated syntax  
              | for describing file locations and sources (src-dest mappings).
            p Wildcards, directory expansion, even using javascript functions to filter files. Very flexible!

          section
            h2 File configurations :(
            p There are also a lot of ways to configure files. It can get confusing.
              
            

      


//
  Generated @ #{datetime}, version #{version}